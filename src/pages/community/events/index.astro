---
import Tag from "@/components/ui/tag2.astro";
import Layout from "@/layouts/layout.astro";
import { getCollection, getEntry } from "astro:content";
import ButtonLink from "../../../components/ui/button-link.astro";

import EventCard from "@/components/community-pages/event-card.astro";
import TopMargin from "@/components/ui/top-margin.astro";

const cards = await getCollection("Community_Akash_Events_Page");
const { data } = await getEntry("Community_Page", "events");

const allCards = cards.map((card) => card.data);

const eventDurationInMilliSeconds = 864000000; // 10 days
const archivePeriodInMilliSeconds = 31449600000; // 1 year
const currentOffsetDateTime = new Date(new Date() - eventDurationInMilliSeconds).getTime(); // offset into the past as event duration can last up to a week
const cutoffOffsetDateTime = new Date(new Date() - archivePeriodInMilliSeconds).getTime(); // cutoff time set into the past by the archive period variable for when events should not be shown in archive 

const relevantCards = allCards.filter((curr: any) => {
  // return true for all tbd events under the assumption that tbd events are set in the future don't always have a set date yet
  if (curr.tbd) {
    return true;
  }

  const eventDate = new Date(curr.eventDate).getTime();
    
  return eventDate > currentOffsetDateTime;
});

const astroUrl = Astro.url;

const sortedCards = relevantCards.sort((a, b) => {
  if (a.month === "TBD") {
    return 1;
  }
  if (b.month === "TBD") {
    return -1;
  }

  return (
    new Date(a.eventDate).getTime() -
    new Date(b.eventDate).getTime()
  );
});
---

<Layout
  title={data?.title}
  image="/meta-images/community.png"
  image="/meta-images/community.png"
  description={data?.description}
>
  <TopMargin>
    <div class="overflow-hidden">
      <div>
        <div class="mx-auto mt-10 md:mt-0 text-center">
          <h1 id="overview" class="text-3xl md:text-4xl lg:text-5xl">
            {data?.title}
          </h1>
          <p class="mt-3 text-base leading-[24px] text-para">
            {data?.description}
          </p>
        </div>
      </div>

      <div class="overflow-hidden">
        {
            <div class="mt-8 grid grid-cols-1 gap-y-8 sm:grid-cols-2 sm:gap-x-6 lg:grid-cols-3 2xl:grid-cols-4">
              {sortedCards.map((card: any) => (
                <EventCard key={card.id} card={card} />
              ))}
            </div>
        }
        <div class="flex justify-center mt-10">
          <ButtonLink
            variant="secondary"
            size="xs"
            link={"archived"}
          >
            See past events in the archive
          </ButtonLink>
        </div>
      </div>
    </div>
  </TopMargin>
</Layout>
